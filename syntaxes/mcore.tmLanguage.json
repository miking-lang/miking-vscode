{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "MCore",
  "patterns": [
    { "include": "#strings" },
    { "include": "#characters" },
    { "include": "#comment" },
    { "include": "#bindings" },
    { "include": "#intrinsics" },
    { "include": "#keywords" },
    { "include": "#literals" },
    { "include": "#types" },
    { "include": "#identifiers" },
    { "include": "#operators" }
  ],
  "repository": {
    "bindings": {
      "patterns": [
        {
          "comment": "let expression/semantic functions",
          "match": "\\b(let|sem)[[:space:]]+(([[:lower:]_][[:word:]']*)|(#var\".*\"))",
          "captures": {
            "1": { "name": "keyword.mcore" },
            "2": { "name": "entity.name.function.binding.mcore" }
          }
        },
        {
          "comment": "type/syntax definition",
          "match": "\\b(type|syn)[[:space:]]+(([[:upper:]][[:word:]']*)|(#type\".*\"))",
          "captures": {
            "1": { "name": "keyword.mcore" },
            "2": { "name": "entity.name.type.binding.mcore" }
          }
        },
        {
          "comment": "Constructor definition",
          "match": "\\b(con)[[:space:]]+(([[:upper:]][[:word:]']*)|(#con\".*\"))",
          "captures": {
            "1": { "name": "keyword.mcore" },
            "2": { "name": "entity.name.tag.binding.mcore" }
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.mcore",
          "match": "[=\\|:;\\.\\-+,&_!#][>+]?"
        }
      ]
    },
    "intrinsics": {
      "patterns": [
        {
          "comment": "Unsafe coercion",
          "name": "support.function.mcore",
          "match": "\\b(unsafeCoerce)\\b"
        },
        {
          "comment": "Integer and floats",
          "name": "support.function.mcore",
          "match": "\\b((add|sub|mul|div|mod|neg|lt|leq|gt|geq|eq|neq)(i|f))\\b"
        },
        {
          "comment": "Integer and floats",
          "name": "support.function.mcore",
          "match": "\\b(slli|srli|srai|floorfi|ceilfi|roundfi|int2float|stringIsFloat|string2float|float2string)\\b"
        },
        {
          "comment": "Characters",
          "name": "support.function.mcore",
          "match": "\\b(eqc|char2int|int2char)\\b"
        },
        {
          "comment": "Sequences",
          "name": "support.function.mcore",
          "match": "\\b(create|createList|createRope|isList|isRope|length|concat|get|set|cons|snoc|splitAt|reverse|head|tail|null|map|mapi|iter|iteri|foldl|foldr|subsequence)\\b"
        },
        {
          "comment": "Random numbers",
          "name": "support.function.mcore",
          "match": "\\b(randIntU|randSetSeed)\\b"
        },
        {
          "comment": "Time",
          "name": "support.function.mcore",
          "match": "\\b(wallTimeMs|sleepMs)\\b"
        },
        {
          "comment": "Debug and I/O",
          "name": "support.function.mcore",
          "match": "\\b(print|printError|dprint|flushStdout|flushStderr|readLine|readBytesAsString|argv|readFile|writeFile|fileExists|deleteFile|command|error|exit)\\b"
        },
        {
          "comment": "Constructor tags",
          "name": "support.function.mcore",
          "match": "\\b(constructorTag)\\b"
        },
        {
          "comment": "Symbols",
          "name": "support.function.mcore",
          "match": "\\b(eqsym|gensym|sym2hash)\\b"
        },
        {
          "comment": "References",
          "name": "support.function.mcore",
          "match": "\\b(ref|deref|modref)\\b"
        },
        {
          "comment": "Maps",
          "name": "support.function.mcore",
          "match": "\\b(mapEmpty|mapSize|mapGetCmpFun|mapInsert|mapRemove|mapFindExn|mapFindOrElse|mapFindApplyOrElse|mapAny|mapMem|mapMap|mapMapWithKey|mapFoldWithKey|mapBindings|mapChooseExn|mapChooseOrElse|mapEq|mapCmp)\\b"
        },
        {
          "comment": "Tensors",
          "name": "support.function.mcore",
          "match": "\\b(tensorCreateUninitInt|tensorCreateUninitFloat|tensorCreateCArrayInt|tensorCreateCArrayFloat|tensorCreateDense|tensorGetExn|tensorSetExn|tensorLinearGetExn|tensorLinearSetExn|tensorRank|tensorShape|tensorReshapeExn|tensorCopy|tensorTransposeExn|tensorSliceExn|tensorSubExn|tensorIterSlice|tensorEq|tensor2string)\\b"
        },
        {
          "comment": "Boot parser",
          "name": "support.function.mcore",
          "match": "\\b(bootParserParseMExprString|bootParserParseMCoreFile|bootParserGetId|bootParserGetTerm|bootParserGetType|bootParserGetString|bootParserGetInt|bootParserGetFloat|bootParserGetListLength|bootParserGetConst|bootParserGetPat|bootParserGetInfo)\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.other.mcore",
          "match": "\\b(if|then|else|match|with|utest|type|con|lang|let|recursive|lam|in|end|syn|sem|use|using|external|switch|case|all)\\b"
        },
        {
          "name": "keyword.control.mcore",
          "match": "\\b(mexpr|include|never)\\b"
        }
      ]
    },
    "comment": {
      "patterns": [
        { "include": "#comment-line" },
        { "include": "#comment-block" },
        { "include": "#comment-block-illegal" }
      ]
    },
    "comment-line": {
      "name": "comment.line.mcore",
      "begin": "--",
      "end": "\n"
    },
    "comment-block": {
      "name": "comment.block.mcore",
      "begin": "[/]-",
      "end": "-[/]",
      "patterns": [{ "include": "#comment-block" }]
    },
    "comment-block-illegal": {
      "name": "invalid.illegal.block.mcore",
      "match": "-[/]"
    },
    "strings": {
      "name": "string.quote.double.mcore",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.mcore",
          "match": "\\\\."
        }
      ]
    },
    "characters": {
      "name": "string.quoted.single.mcore",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.character.escape.mcore",
          "match": "\\\\."
        }
      ]
    },
    "literals": {
      "patterns": [
        {
          "name": "constant.language.boolean.mcore",
          "match": "\\b(true|false)\\b"
        },
        {
          "comment": "floating point decimal literal with exponent",
          "name": "constant.numeric.decimal.float.mcore",
          "match": "\\b([[:digit:]][[:digit:]_]*(\\.[[:digit:]_]*)?[eE][+-]?[[:digit:]][[:digit:]_]*)\\b"
        },
        {
          "comment": "floating point decimal literal",
          "name": "constant.numeric.decimal.float.mcore",
          "match": "\\b([[:digit:]][[:digit:]_]*)(\\.[[:digit:]_]\\b|\\.)"
        },
        {
          "comment": "decimal integer literal",
          "name": "constant.numeric.decimal.integer.mcore",
          "match": "\\b([[:digit:]][[:digit:]_]*)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "comment": "builtin type",
          "name": "support.type.mcore",
          "match": "\\b(Tensor|Unknown|Bool|Int|Float|Char|String)\\b"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "comment": "capital identifier for constructor or type",
          "name": "constant.other.capital-identifier.mcore",
          "match": "\\b[[:upper:]][[:word:]']*('|\\b)"
        },
        {
          "comment": "lowercase identifier",
          "name": "source.mcore",
          "match": "\\b[[:lower:]_][[:word:]']*\\b"
        }
      ]
    }
  },
  "scopeName": "source.mcore"
}
